// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockUrlStorage

import (
	context "coins/pkg/types/context"

	mock "github.com/stretchr/testify/mock"

	queryParameter "coins/pkg/types/queryParameter"

	url "coins/internal/domain/url"
)

// Url is an autogenerated mock type for the Url type
type Url struct {
	mock.Mock
}

// CountUrls provides a mock function with given fields: ctx, coinId
func (_m *Url) CountUrls(ctx context.Context, coinId uint) (uint64, error) {
	ret := _m.Called(ctx, coinId)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (uint64, error)); ok {
		return rf(ctx, coinId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) uint64); ok {
		r0 = rf(ctx, coinId)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, coinId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUrl provides a mock function with given fields: ctx, _a1
func (_m *Url) CreateUrl(ctx context.Context, _a1 *url.Url) (*url.Url, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *url.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *url.Url) (*url.Url, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *url.Url) *url.Url); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *url.Url) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUrl provides a mock function with given fields: ctx, ID
func (_m *Url) DeleteUrl(ctx context.Context, ID uint) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUrls provides a mock function with given fields: ctx, coinId, parameter
func (_m *Url) ListUrls(ctx context.Context, coinId uint, parameter queryParameter.QueryParameter) ([]*url.Url, error) {
	ret := _m.Called(ctx, coinId, parameter)

	var r0 []*url.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, queryParameter.QueryParameter) ([]*url.Url, error)); ok {
		return rf(ctx, coinId, parameter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, queryParameter.QueryParameter) []*url.Url); ok {
		r0 = rf(ctx, coinId, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*url.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, queryParameter.QueryParameter) error); ok {
		r1 = rf(ctx, coinId, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUrl provides a mock function with given fields: ctx, _a1
func (_m *Url) UpdateUrl(ctx context.Context, _a1 *url.Url) (*url.Url, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *url.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *url.Url) (*url.Url, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *url.Url) *url.Url); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *url.Url) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUrls provides a mock function with given fields: ctx, urls
func (_m *Url) UpsertUrls(ctx context.Context, urls ...*url.Url) ([]*url.Url, error) {
	_va := make([]interface{}, len(urls))
	for _i := range urls {
		_va[_i] = urls[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*url.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*url.Url) ([]*url.Url, error)); ok {
		return rf(ctx, urls...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*url.Url) []*url.Url); ok {
		r0 = rf(ctx, urls...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*url.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*url.Url) error); ok {
		r1 = rf(ctx, urls...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UrlById provides a mock function with given fields: ctx, ID
func (_m *Url) UrlById(ctx context.Context, ID uint) (*url.Url, error) {
	ret := _m.Called(ctx, ID)

	var r0 *url.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*url.Url, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *url.Url); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUrl interface {
	mock.TestingT
	Cleanup(func())
}

// NewUrl creates a new instance of Url. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUrl(t mockConstructorTestingTNewUrl) *Url {
	mock := &Url{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
