// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     coins.avsc
 */
package entities

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Coins struct {
	Coins []Coin `json:"coins"`
}

const CoinsAvroCRC64Fingerprint = "d\x94\xb9\x18\xfd\xc9\xdf\x15"

func NewCoins() Coins {
	r := Coins{}
	r.Coins = make([]Coin, 0)

	return r
}

func DeserializeCoins(r io.Reader) (Coins, error) {
	t := NewCoins()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCoinsFromSchema(r io.Reader, schema string) (Coins, error) {
	t := NewCoins()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCoins(r Coins, w io.Writer) error {
	var err error
	err = writeArrayCoin(r.Coins, w)
	if err != nil {
		return err
	}
	return err
}

func (r Coins) Serialize(w io.Writer) error {
	return writeCoins(r, w)
}

func (r Coins) Schema() string {
	return "{\"fields\":[{\"name\":\"coins\",\"type\":{\"items\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"icon\",\"type\":\"string\"},{\"name\":\"urls\",\"type\":{\"items\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"}],\"name\":\"Url\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Coin\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"coin.io.coins.serialization.avro.Coins\",\"type\":\"record\"}"
}

func (r Coins) SchemaName() string {
	return "coin.io.coins.serialization.avro.Coins"
}

func (_ Coins) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Coins) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Coins) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Coins) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Coins) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Coins) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Coins) SetString(v string)   { panic("Unsupported operation") }
func (_ Coins) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Coins) Get(i int) types.Field {
	switch i {
	case 0:
		r.Coins = make([]Coin, 0)

		w := ArrayCoinWrapper{Target: &r.Coins}

		return w

	}
	panic("Unknown field index")
}

func (r *Coins) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Coins) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Coins) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Coins) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Coins) HintSize(int)                     { panic("Unsupported operation") }
func (_ Coins) Finalize()                        {}

func (_ Coins) AvroCRC64Fingerprint() []byte {
	return []byte(CoinsAvroCRC64Fingerprint)
}

func (r Coins) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["coins"], err = json.Marshal(r.Coins)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Coins) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["coins"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Coins); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for coins")
	}
	return nil
}
