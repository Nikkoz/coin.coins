// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     coins.avsc
 */
package entities

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Coin struct {
	Id int32 `json:"id"`

	Name string `json:"name"`

	Code string `json:"code"`

	Icon string `json:"icon"`

	Urls []Url `json:"urls"`
}

const CoinAvroCRC64Fingerprint = "S7d∆ú\b\x84\xe8"

func NewCoin() Coin {
	r := Coin{}
	r.Urls = make([]Url, 0)

	return r
}

func DeserializeCoin(r io.Reader) (Coin, error) {
	t := NewCoin()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCoinFromSchema(r io.Reader, schema string) (Coin, error) {
	t := NewCoin()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCoin(r Coin, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Code, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Icon, w)
	if err != nil {
		return err
	}
	err = writeArrayUrl(r.Urls, w)
	if err != nil {
		return err
	}
	return err
}

func (r Coin) Serialize(w io.Writer) error {
	return writeCoin(r, w)
}

func (r Coin) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"icon\",\"type\":\"string\"},{\"name\":\"urls\",\"type\":{\"items\":{\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"}],\"name\":\"Url\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"coin.io.coins.serialization.avro.Coin\",\"type\":\"record\"}"
}

func (r Coin) SchemaName() string {
	return "coin.io.coins.serialization.avro.Coin"
}

func (_ Coin) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Coin) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Coin) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Coin) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Coin) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Coin) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Coin) SetString(v string)   { panic("Unsupported operation") }
func (_ Coin) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Coin) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Code}

		return w

	case 3:
		w := types.String{Target: &r.Icon}

		return w

	case 4:
		r.Urls = make([]Url, 0)

		w := ArrayUrlWrapper{Target: &r.Urls}

		return w

	}
	panic("Unknown field index")
}

func (r *Coin) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Coin) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Coin) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Coin) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Coin) HintSize(int)                     { panic("Unsupported operation") }
func (_ Coin) Finalize()                        {}

func (_ Coin) AvroCRC64Fingerprint() []byte {
	return []byte(CoinAvroCRC64Fingerprint)
}

func (r Coin) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["code"], err = json.Marshal(r.Code)
	if err != nil {
		return nil, err
	}
	output["icon"], err = json.Marshal(r.Icon)
	if err != nil {
		return nil, err
	}
	output["urls"], err = json.Marshal(r.Urls)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Coin) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["code"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Code); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for code")
	}
	val = func() json.RawMessage {
		if v, ok := fields["icon"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Icon); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for icon")
	}
	val = func() json.RawMessage {
		if v, ok := fields["urls"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Urls); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for urls")
	}
	return nil
}
