// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockCoinStorage

import (
	coin "coins/internal/domain/coin"
	context "coins/pkg/types/context"

	mock "github.com/stretchr/testify/mock"

	queryParameter "coins/pkg/types/queryParameter"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CoinByID provides a mock function with given fields: ctx, id
func (_m *Storage) CoinByID(ctx context.Context, id uint) (*coin.Coin, error) {
	ret := _m.Called(ctx, id)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*coin.Coin, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *coin.Coin); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountCoins provides a mock function with given fields: ctx
func (_m *Storage) CountCoins(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCoin provides a mock function with given fields: ctx, _a1
func (_m *Storage) CreateCoin(ctx context.Context, _a1 *coin.Coin) (*coin.Coin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) (*coin.Coin, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) *coin.Coin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coin.Coin) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoin provides a mock function with given fields: ctx, ID
func (_m *Storage) DeleteCoin(ctx context.Context, ID uint) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCoins provides a mock function with given fields: ctx, parameter
func (_m *Storage) ListCoins(ctx context.Context, parameter queryParameter.QueryParameter) ([]*coin.Coin, error) {
	ret := _m.Called(ctx, parameter)

	var r0 []*coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queryParameter.QueryParameter) ([]*coin.Coin, error)); ok {
		return rf(ctx, parameter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queryParameter.QueryParameter) []*coin.Coin); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queryParameter.QueryParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoin provides a mock function with given fields: ctx, _a1
func (_m *Storage) UpdateCoin(ctx context.Context, _a1 *coin.Coin) (*coin.Coin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) (*coin.Coin, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) *coin.Coin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coin.Coin) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertCoins provides a mock function with given fields: ctx, coins
func (_m *Storage) UpsertCoins(ctx context.Context, coins ...*coin.Coin) ([]*coin.Coin, error) {
	_va := make([]interface{}, len(coins))
	for _i := range coins {
		_va[_i] = coins[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*coin.Coin) ([]*coin.Coin, error)); ok {
		return rf(ctx, coins...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*coin.Coin) []*coin.Coin); ok {
		r0 = rf(ctx, coins...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*coin.Coin) error); ok {
		r1 = rf(ctx, coins...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
