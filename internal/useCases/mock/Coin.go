// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockUseCase

import (
	coin "coins/internal/domain/coin"
	context "coins/pkg/types/context"

	coins "github.com/Nikkoz/coin.sync/pkg/protobuf/coins"

	mock "github.com/stretchr/testify/mock"

	queryParameter "coins/pkg/types/queryParameter"

	serde "github.com/confluentinc/confluent-kafka-go/schemaregistry/serde"
)

// Coin is an autogenerated mock type for the Coin type
type Coin struct {
	mock.Mock
}

// Consume provides a mock function with given fields: ctx, deserializer, topic, msg
func (_m *Coin) Consume(ctx context.Context, deserializer serde.Deserializer, topic string, msg []byte) error {
	ret := _m.Called(ctx, deserializer, topic, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, serde.Deserializer, string, []byte) error); ok {
		r0 = rf(ctx, deserializer, topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx
func (_m *Coin) Count(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Coin) Create(ctx context.Context, _a1 *coin.Coin) (*coin.Coin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) (*coin.Coin, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) *coin.Coin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coin.Coin) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *Coin) Delete(ctx context.Context, ID uint) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Coin) FindByID(ctx context.Context, ID uint) (*coin.Coin, error) {
	ret := _m.Called(ctx, ID)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*coin.Coin, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *coin.Coin); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFullByID provides a mock function with given fields: ctx, ID
func (_m *Coin) FindFullByID(ctx context.Context, ID uint) (*coin.Coin, *coins.Coin, error) {
	ret := _m.Called(ctx, ID)

	var r0 *coin.Coin
	var r1 *coins.Coin
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*coin.Coin, *coins.Coin, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *coin.Coin); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) *coins.Coin); ok {
		r1 = rf(ctx, ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*coins.Coin)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint) error); ok {
		r2 = rf(ctx, ID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: ctx, parameter
func (_m *Coin) List(ctx context.Context, parameter queryParameter.QueryParameter) ([]*coin.Coin, error) {
	ret := _m.Called(ctx, parameter)

	var r0 []*coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queryParameter.QueryParameter) ([]*coin.Coin, error)); ok {
		return rf(ctx, parameter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queryParameter.QueryParameter) []*coin.Coin); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queryParameter.QueryParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Produce provides a mock function with given fields: ctx, serializer, msg
func (_m *Coin) Produce(ctx context.Context, serializer *serde.Serializer, msg interface{}) error {
	ret := _m.Called(ctx, serializer, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *serde.Serializer, interface{}) error); ok {
		r0 = rf(ctx, serializer, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, topics
func (_m *Coin) Subscribe(ctx context.Context, topics []string) error {
	ret := _m.Called(ctx, topics)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Coin) Update(ctx context.Context, _a1 *coin.Coin) (*coin.Coin, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) (*coin.Coin, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coin.Coin) *coin.Coin); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coin.Coin) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, _a1
func (_m *Coin) Upsert(ctx context.Context, _a1 ...*coin.Coin) ([]*coin.Coin, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*coin.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*coin.Coin) ([]*coin.Coin, error)); ok {
		return rf(ctx, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*coin.Coin) []*coin.Coin); ok {
		r0 = rf(ctx, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coin.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*coin.Coin) error); ok {
		r1 = rf(ctx, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCoin interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoin creates a new instance of Coin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoin(t mockConstructorTestingTNewCoin) *Coin {
	mock := &Coin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
